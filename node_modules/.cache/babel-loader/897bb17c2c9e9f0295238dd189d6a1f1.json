{"ast":null,"code":"var _jsxFileName = \"/Users/isabelngan/Desktop/uclacode/Homework/week19/GOT-memory-game/src/components/GameBoard/index.js\";\nimport React, { Component } from \"react\";\nimport Card from '../CharacterIcons/Card';\nimport Characters from '../CharacterIcons/Card';\nimport './style.css';\n\nclass Gameboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      Characters\n    };\n\n    this.setClicked = id => {\n      const Characters = this.state.Characters;\n      const cardClicked = Characters.filter(Character => Character.id === id);\n\n      if (cardClicked[0].clicked) {\n        guessesCorrect = 0;\n        message = 'Whoops. Start over'; // change to map or smth?\n\n        for (let i = 0; i < Characters.length; i++) {\n          Characters[i].clicked = false;\n        }\n\n        this.setState({\n          message\n        });\n        this.setState({\n          guessesCorrect\n        });\n        this.setState({\n          Characters\n        });\n      } else {\n        cardClicked[0].clicked = true;\n        guessesCorrect = guessesCorrect + 4;\n        message = \"Good Job!\";\n\n        if (guessesCorrect > topScore) {\n          topScore = guessesCorrect;\n          hearts++;\n          this.setState({\n            hearts\n          });\n          this.setState({\n            topScore\n          });\n          this.renderHearts();\n        }\n\n        Characters.sort((a, b) => {\n          return 0.5 - Math.random();\n        });\n        this.setState({\n          Characters\n        });\n        this.setState({\n          guessesCorrect\n        });\n        this.setState({\n          message\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.state.Characters.map(Character => React.createElement(Card, {\n      setClicked: this.setClicked,\n      id: Character.id,\n      key: Character.id,\n      image: Character.image,\n      name: Character.name,\n      className: \"col-sm-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })));\n  }\n\n}\n\n;\nexport default Gameboard;","map":{"version":3,"sources":["/Users/isabelngan/Desktop/uclacode/Homework/week19/GOT-memory-game/src/components/GameBoard/index.js"],"names":["React","Component","Card","Characters","Gameboard","state","setClicked","id","cardClicked","filter","Character","clicked","guessesCorrect","message","i","length","setState","topScore","hearts","renderHearts","sort","a","b","Math","random","render","map","image","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAO,aAAP;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE9BI,KAF8B,GAEtB;AACJF,MAAAA;AADI,KAFsB;;AAAA,SAM9BG,UAN8B,GAMjBC,EAAE,IAAI;AACf,YAAMJ,UAAU,GAAG,KAAKE,KAAL,CAAWF,UAA9B;AACA,YAAMK,WAAW,GAAGL,UAAU,CAACM,MAAX,CAAkBC,SAAS,IAAIA,SAAS,CAACH,EAAV,KAAiBA,EAAhD,CAApB;;AAEA,UAAIC,WAAW,CAAC,CAAD,CAAX,CAAeG,OAAnB,EAA4B;AAExBC,QAAAA,cAAc,GAAG,CAAjB;AACAC,QAAAA,OAAO,GAAG,oBAAV,CAHwB,CAKxB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,UAAU,CAACY,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCX,UAAAA,UAAU,CAACW,CAAD,CAAV,CAAcH,OAAd,GAAwB,KAAxB;AACH;;AAED,aAAKK,QAAL,CAAc;AAAEH,UAAAA;AAAF,SAAd;AACA,aAAKG,QAAL,CAAc;AAAEJ,UAAAA;AAAF,SAAd;AACA,aAAKI,QAAL,CAAc;AAAEb,UAAAA;AAAF,SAAd;AAEH,OAdD,MAcO;AACHK,QAAAA,WAAW,CAAC,CAAD,CAAX,CAAeG,OAAf,GAAyB,IAAzB;AAEAC,QAAAA,cAAc,GAAGA,cAAc,GAAG,CAAlC;AACAC,QAAAA,OAAO,GAAG,WAAV;;AAEA,YAAID,cAAc,GAAGK,QAArB,EAA+B;AAC3BA,UAAAA,QAAQ,GAAGL,cAAX;AACAM,UAAAA,MAAM;AACN,eAAKF,QAAL,CAAc;AAAEE,YAAAA;AAAF,WAAd;AACA,eAAKF,QAAL,CAAc;AAAEC,YAAAA;AAAF,WAAd;AACA,eAAKE,YAAL;AACH;;AAEDhB,QAAAA,UAAU,CAACiB,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtB,iBAAO,MAAMC,IAAI,CAACC,MAAL,EAAb;AACH,SAFD;AAIA,aAAKR,QAAL,CAAc;AAAEb,UAAAA;AAAF,SAAd;AACA,aAAKa,QAAL,CAAc;AAAEJ,UAAAA;AAAF,SAAd;AACA,aAAKI,QAAL,CAAc;AAAEH,UAAAA;AAAF,SAAd;AACH;AACJ,KA9C6B;AAAA;;AAgD9BY,EAAAA,MAAM,GAAG;AAEL,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKpB,KAAL,CAAWF,UAAX,CAAsBuB,GAAtB,CAA0BhB,SAAS,IAChC,oBAAC,IAAD;AACI,MAAA,UAAU,EAAE,KAAKJ,UADrB;AAEI,MAAA,EAAE,EAAEI,SAAS,CAACH,EAFlB;AAGI,MAAA,GAAG,EAAEG,SAAS,CAACH,EAHnB;AAII,MAAA,KAAK,EAAEG,SAAS,CAACiB,KAJrB;AAKI,MAAA,IAAI,EAAEjB,SAAS,CAACkB,IALpB;AAMI,MAAA,SAAS,EAAC,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,CADJ;AAcH;;AAhE6B;;AAiEjC;AAED,eAAexB,SAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Card from '../CharacterIcons/Card';\nimport Characters from '../CharacterIcons/Card';\nimport './style.css';\n\nclass Gameboard extends Component {\n\n    state = {\n        Characters\n    };\n\n    setClicked = id => {\n        const Characters = this.state.Characters;\n        const cardClicked = Characters.filter(Character => Character.id === id);\n\n        if (cardClicked[0].clicked) {\n\n            guessesCorrect = 0;\n            message = 'Whoops. Start over';\n\n            // change to map or smth?\n            for (let i = 0; i < Characters.length; i++) {\n                Characters[i].clicked = false;\n            }\n\n            this.setState({ message });\n            this.setState({ guessesCorrect });\n            this.setState({ Characters });\n\n        } else {\n            cardClicked[0].clicked = true;\n\n            guessesCorrect = guessesCorrect + 4;\n            message = \"Good Job!\"\n\n            if (guessesCorrect > topScore) {\n                topScore = guessesCorrect;\n                hearts++;\n                this.setState({ hearts });\n                this.setState({ topScore });\n                this.renderHearts();\n            }\n\n            Characters.sort((a, b) => {\n                return 0.5 - Math.random();\n            });\n\n            this.setState({ Characters });\n            this.setState({ guessesCorrect });\n            this.setState({ message });\n        }\n    };\n\n    render() {\n\n        return (\n            <div className=\"row\">\n                {this.state.Characters.map(Character => (\n                    <Card\n                        setClicked={this.setClicked}\n                        id={Character.id}\n                        key={Character.id}\n                        image={Character.image}\n                        name={Character.name}\n                        className=\"col-sm-1\"\n                    />\n                ))}\n            </div>\n        );\n    }\n};\n\nexport default Gameboard;"]},"metadata":{},"sourceType":"module"}